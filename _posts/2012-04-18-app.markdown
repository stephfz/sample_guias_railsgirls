---
layout: default
title: Rails Girls App Tutorial
permalink: app
---

# Desarrolla tu primera aplicación

*Created by Vesa Vänskä, [@vesan](https://twitter.com/vesan)*

**Asegúrate de tener instalado Rails.** [**Sigue la guía de instalación**](/install) si aún no lo has instalado.


## Conozca las herramientas

<div class="indent" markdown="1">

<h3><i class="icon-text-editor">&nbsp;</i></h3>
### Editor de Texto

[Sublime Text](http://www.sublimetext.com), [Komodo Edit](http://www.activestate.com/komodo-edit), Vim, Emacs, y Gedit son ejemplos de editors de textos que podrás usar para escribir código y editar archivos.

<h3><i class="icon-prompt">&nbsp;</i></h3>
### Terminal (Conocido como Command Prompt en Windows)
Es el lugar donde inicias el servidor Rails y ejecutas comandos.

<h3><i class="icon-browser">&nbsp;</i></h3>
### Navegador web
(Firefox, Safari, Chrome) para vizualizar tu aplicación.

</div>


## *1.*Creando la applicación

Vamos a iniciar creando una nueva aplicación llamada *railsgirls*.

Primero, abrimos una terminal:

* Mac OS X: Abre Spotlight, digite *Terminal* y click en la applicación *Terminal*.
* Windows: Click en Inicio y busca *Comando Prompt*, luego click *Comando Prompt con Ruby on Rails*.
* Linux (Ubuntu): Buscar por *Terminal* en el dash y click *Terminal*.

Luego, digite estos comandos en el terminal:

<div class="os-specific">
  <div class="nix">
{% highlight sh %}
mkdir projects
cd projects
rails new railsgirls
cd railsgirls
rails server
{% endhighlight %}
  </div>

  <div class="win">
{% highlight sh %}
mkdir projects
cd projects
ruby rails new railsgirls
cd railsgirls
ruby script\rails server
{% endhighlight %}
  </div>
</div>

Abre [http://localhost:3000](http://localhost:3000) en tu navegador. Debería verse una página "Welcome aboard", lo que significa que la generación de tu nueva aplicación esta funcionando correctamente.

Presione `CTRL-C` en la terminal para salir del servidor.

**Coach:** Explique que hace cada comando. ¿Qué fue generado? ¿Quá hace el servidor?


## *2.*Crear idea scaffold

Vamos a usar la funcionalidad de scaffold para generar un punto de partida que nos permita listar, agregar, eliminar, editar, y ver cosas; en nuestro caso ideas.

**Coach:** ¿Qué es Rails scaffolding? (Explique el comando, el nombre de modelo y la relación de tablas en la base de datos, nombrando las convenciones, atributos y tipos, etc.) ¿Qué son las migraciones y por qué son necesarias?

<div class="os-specific">
  <div class="nix">
{% highlight sh %}
rails generate scaffold idea name:string description:text picture:string
rake db:migrate
rails server
{% endhighlight %}
  </div>

  <div class="win">
{% highlight sh %}
ruby rails generate scaffold idea name:string description:text picture:string
ruby rake db:migrate
ruby rails server
{% endhighlight %}
  </div>
</div>

Abre [http://localhost:3000/ideas](http://localhost:3000/ideas) en tu navegador. Prueba lo que tienes ejecutando, con estas pocas líneas de comando.

Presione `CTRL-C` en la terminal para salir del servidor.


## *3.*Diseño

**Coach:** Hable acerca de la relación entre HTML y Rails. ¿Qué parte de las vistas es HTML y qué es Ruby Embebido (ERB)? ¿Qué es MVC y cómo se relaciona con todo esto? (Modelos y controladores son responsables para la generacion de las vistas con HTML.)

La aplicación no se ve muy bien aún. Vamos a hacer algo con esto. Usaremos el proyecto Twitter Bootstrap para darle un mejor estilo.

Abre `app/views/layouts/application.html.erb` en tu editor de texto y encima de la linea

{% highlight erb %}
<%= stylesheet_link_tag "application" %>
{% endhighlight %}

incluya

{% highlight erb %}
<link rel="stylesheet" href="http://railsgirls.com/assets/bootstrap.css">
{% endhighlight %}

y reemplace

{% highlight erb %}
<%= yield %>
{% endhighlight %}

por

{% highlight erb %}
<div class="container">
  <%= yield %>
</div>
{% endhighlight %}

Tambíen vamos agregar un barra de navegación y un pie de página en nuestro layout. En el mismo archivo, debajo de `<body>` agregar

{% highlight html %}
<div class="navbar navbar-fixed-top">
  <div class="navbar-inner">
    <div class="container">
      <a class="brand" href="/">The Idea app</a>
      <ul class="nav">
        <li class="active"><a href="/ideas">Ideas</a></li>
      </ul>
    </div>
  </div>
</div>
{% endhighlight %}

y antes de `</body>` agregar

{% highlight html %}
<footer>
  <div class="container">
    Rails Girls 2013
  </div>
</footer>
{% endhighlight %}

Ahora además vamos a cambiar el stilo de la tabla ideas. Abre `app/assets/stylesheets/application.css` y al final agregar

{% highlight css %}
body { padding-top: 100px; }
footer { margin-top: 100px; }
table, td, th { vertical-align: middle !important; border: none !important; }
th { border-bottom: 1px solid #DDD !important; }
{% endhighlight %}

Ahora refresque el navegador para ver qué fue cambiado. Además puedes cambiar el HTML & CSS libremente.

**Coach:** Hable un poco acerca de CSS y layouts.


## Paso 4: Agregando subida de imagenes

Necesitamos instalar una pieza de sotfware para nuestra subida de imagenes en Rails.

Abre `Gemfile` en el directorio del proyecto usando tu editor texto y debajo de la linea

{% highlight ruby %}
gem 'sqlite3'
{% endhighlight %}

Agregue

{% highlight ruby %}
gem 'carrierwave'
{% endhighlight %}

**Coach:** Explique qué son las librerias y por qué son muy útiles. Describe qué es el software open source.

En la terminal ejecute:

{% highlight sh %}
bundle
{% endhighlight %}

En este punto necesitamos **reiniciar el proceso del servidor Rails** en la terminal. Es necesario para que la aplicación cargue la libreria adicionada.

Ahora podemos generar el código para el manejo de uploads. En la terminal ejecutar:

{% highlight sh %}
rails generate uploader Picture
{% endhighlight %}

Abre `app/models/idea.rb` y debajo de la línea

{% highlight ruby %}
class Idea < ActiveRecord::Base
{% endhighlight %}

agregue

{% highlight ruby %}
mount_uploader :picture, PictureUploader
{% endhighlight %}

Abre `app/views/ideas/_form.html.erb` y cambie

{% highlight erb %}
<%= f.text_field :picture %>
{% endhighlight %}

a

{% highlight erb %}
<%= f.file_field :picture %>
{% endhighlight %}

En tu navegador, agregar nueva idea con una imagen. Cuando cargas una imagen no se ve bien, porque te muestra sólo la ruta del archivo, Así que vamos arreglar eso.

Abre `app/views/ideas/show.html.erb` y cambie

{% highlight erb %}
<%= @idea.picture %>
{% endhighlight %}

a

{% highlight erb %}
<%= image_tag(@idea.picture_url, :width => 600) if @idea.picture.present? %>
{% endhighlight %}

Ahora refresca tu navegador para ver los cambios.

**Coach:** Hable un poco acerca de HTML.


## Paso 5: Ajustes finales en las rutas

Si al abrir [http://localhost:3000](http://localhost:3000) aún seguiremos viendo la página "Welcome aboard". Vamos a redireccionar a la página de ideas.

En Mac OS X y Linux, en la terminal ejecute:

{% highlight sh %}
rm public/index.html
{% endhighlight %}

En Windows, en el command prompt ejecute:

{% highlight bat %}
del public\index.html
{% endhighlight %}

Luego abre `config/routes.rb` y después de la primera linea agregar

{% highlight ruby %}
root :to => redirect('/ideas')
{% endhighlight %}

Verifique el cambio abriendo la ruta raiz en tu navegador.

**Coach:** Hable acerca de routes.


## ¿Qué sigue?

* Agregar diseño usando HTML &amp; CSS
* Agregar ratings
* Use CoffeeScript (o JavaScript) para adicionar interacción
* Agregar redimencionamiento de imagen para que la carga de imagenes sea más rápido


## Guías adicionales

* Guide 1: [Add commenting by Janika Liiv](/commenting)
* Guide 2: [Put your app online with Heroku by Terence Lee](/heroku)
* Guide 3: [Build a map of workshop participants by Rails Girls Berlin](http://railsgirlsberlin.de/apptutorial/)
* Guide 4: [Create thumbnail images for the uploads by Miha Filej](/thumbnails)
* Guide 5: [Add design using HTML &amp; CSS by Alex Liao](/design)
